import { App, Editor, MarkdownView, Menu, Notice, Plugin } from "obsidian";

import { ObsidianWeekSyncView, VIEW_TYPE } from "./view";
import SettingTab from "./settings/settings";

// Remember to rename these classes and interfaces!
interface PluginSettings {
  pluginSetting: string;
}

const DEFAULT_SETTINGS: PluginSettings = {
  pluginSetting: "default",
};

interface HighlightComment {
  text: string;
  comment: string;
  position: {
    start: number;
    end: number;
  };
}

export default class ObsidianWeeklySync extends Plugin {
  settings: PluginSettings;

  async onload() {
    await this.loadSettings();

    this.registerView(VIEW_TYPE, (leaf) => new ObsidianWeekSyncView(leaf));

    this.addRibbonIcon("tent-tree", "Weekly View", (evt) => {
      this.activateView();
    });

    this.addSettingTab(new SettingTab(this.app, this));

    this.addContextMenu();

    this.registerMarkdownPostProcessor((element, context) => {
      this.processHighlightsAndComments(element);
    });

    this.addCommand({
      id: "highlight-and-comment",
      name: "Highlight and Comment",
      editorCallback: (editor: Editor, view: MarkdownView) => {
        this.createHighlightComment(editor, view);
      },
    });
  }

  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE);
  }

  private async createHighlightComment(editor: Editor, view: MarkdownView) {
    const selectedText = editor.getSelection();
    if (!selectedText) {
      new Notice("No text selected");
      return;
    }

    const comment = await this.promptForComment();
    if (comment) {
      const cursorPosition = editor.getCursor();
      const highlightComment: HighlightComment = {
        text: selectedText,
        comment: comment,
        position: {
          start: editor.posToOffset(cursorPosition),
          end: editor.posToOffset(cursorPosition) + selectedText.length,
        },
      };

      const filePath = view.file?.path;
      if (filePath) {
        if (!this.highlightComments[filePath]) {
          this.highlightComments[filePath] = [];
        }
        this.highlightComments[filePath].push(highlightComment);
        await this.saveData(this.highlightComments);
      }

      // Insert the custom syntax for highlight and comment
      const commentSyntax = `==${selectedText}=={${comment}}`;
      editor.replaceSelection(commentSyntax);
    }
  }

  private async promptForComment(): Promise<string | null> {
    return new Promise((resolve) => {
      const menu = new Menu();

      menu.addItem((item) => {
        item
          .setTitle("Enter comment")
          .setIcon("pencil")
          .onClick(() => {
            const commentEl = document.createElement("textarea");
            commentEl.style.width = "100%";
            commentEl.style.height = "100px";

            const modal = this.app.modal.open(commentEl);

            commentEl.focus();
            commentEl.addEventListener("keydown", (e) => {
              if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
                e.preventDefault();
                modal.close();
                resolve(commentEl.value);
              }
            });
          });
      });

      menu.showAtMouseEvent(window.event as MouseEvent);
    });
  }

  processHighlightsAndComments(element: HTMLElement, sourcePath: string) {
    const comments = this.highlightComments[sourcePath] || [];

    // Regex to match custom highlight and comment syntax
    const regex = /==(.+?)=={(.+?)}/g;
    element.querySelectorAll("p").forEach((p) => {
      let innerHTML = p.innerHTML;
      let match;
      // Replace custom syntax with HTML elements
      while ((match = regex.exec(innerHTML)) !== null) {
        const [fullMatch, highlightedText, comment] = match;
        const replacement = `<span class="highlighted" data-comment="${comment}">${highlightedText}</span>`;
        innerHTML = innerHTML.replace(fullMatch, replacement);
      }
      p.innerHTML = innerHTML;
    });

    // Add event listeners for comment tooltips
    element.querySelectorAll(".highlighted").forEach((span) => {
      span.addEventListener("mouseover", (event) => {
        const target = event.target as HTMLElement;
        const comment = target.getAttribute("data-comment");
        if (comment) {
          const tooltip = document.createElement("div");
          tooltip.className = "comment-tooltip";
          tooltip.textContent = comment;
          tooltip.style.position = "absolute";
          tooltip.style.background = "white";
          tooltip.style.border = "1px solid black";
          tooltip.style.padding = "5px";
          tooltip.style.zIndex = "1000";
          document.body.appendChild(tooltip);

          const rect = target.getBoundingClientRect();
          tooltip.style.left = `${rect.left}px`;
          tooltip.style.top = `${rect.bottom + 5}px`;

          target.addEventListener(
            "mouseout",
            () => {
              document.body.removeChild(tooltip);
            },
            { once: true },
          );
        }
      });
    });
  }

  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }

  async saveSettings() {
    await this.saveData(this.settings);
  }

  async activateView() {
    if (this.app.workspace.getLeavesOfType(VIEW_TYPE).length === 0) {
      await this.app.workspace.getRightLeaf(false).setViewState({
        type: VIEW_TYPE,
        active: true,
      });
    }

    this.app.workspace.revealLeaf(
      this.app.workspace.getLeavesOfType(VIEW_TYPE)[0],
    );
  }

  async addContextMenu() {
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        // Add a custom menu item
        menu.addItem((item) => {
          item
            .setTitle("Custom Action")
            .setIcon("dice")
            .onClick(() => {
              // Get the cursor position
              const cursor = editor.getCursor();
              console.log("Custom Action Clicked at:", cursor);

              // Perform your custom action here
              const selection = editor.getSelection();
              console.log("Selected Text:", selection);
              // Add your action here
            });
        });
      }),
    );
  }
}
